package edu.ucsb.cs56.projects.games.roguelike;


import org.junit.Test;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.assertFalse;

/** test class for my subclasses

    @author Clayven Anderson
    @author Hans Marasigan and Richard Nguyen
    @author Rick Lee
    @version cs56 W14
    @see Troll
    @see Golem
    @see Bat
    @see Snake
    @see Zombie
    @see Pirate
*/

public class SubMonsterTest {

    /**

       tests for a bat with 10 hp 10 att and 10points


    */
    @Test public void test_defaultConstructor_and_GettersBat() {
        Bat b=new Bat();
        assertEquals(10,b.getHitPoints());
        assertEquals(10,b.getAttack());
        assertEquals(10,b.getPointValue());
    }

    /**
       tests for a Troll with 15 hp 10 att and 15points


    */
    @Test public void test_defaultConstructor_and_GettersTroll() {
        Troll t=new Troll();
        assertEquals(15,t.getHitPoints());
        assertEquals(10,t.getAttack());
        assertEquals(15,t.getPointValue());
    }

    /**


       tests for a Golem with 50 hp 20 att and 20points
    */
    @Test public void test_defaultConstructor_and_GettersGolem() {
        Golem g=new Golem();
        assertEquals(50,g.getHitPoints());
        assertEquals(20,g.getAttack());
        assertEquals(20,g.getPointValue());
    }

    /**
       tests for a Snake with 5 hp 15 att and 10 points
    */
    @Test public void test_defaultConstructor_and_GettersSnake() {
        Snake s = new Snake();
        assertEquals(5,s.getHitPoints());
        assertEquals(15,s.getAttack());
        assertEquals(10,s.getPointValue());
    }

    /**
       tests for a Zombie with 20 hp 5 att and 15 points
    */
    @Test public void test_defaultConstructor_and_GettersZombie() {
        Zombie z = new Zombie();
        assertEquals(20,z.getHitPoints());
        assertEquals(5,z.getAttack());
        assertEquals(15,z.getPointValue());
    }
    /**
       tests for a Pirate with 20 hp 15 att and 20 points
    */
    @Test public void test_defaultConstructor_and_GettersPirate() {
        Pirate p = new Pirate();
        assertEquals(20,p.getHitPoints());
        assertEquals(15,p.getAttack());
        assertEquals(20,p.getPointValue());
    }


    /**
       tests for a bat with 20 hp 24 att and 10points
    */
    @Test public void test_3ArgConstructorBat() {
        Bat b=new Bat(20,24,0);
        assertEquals(20,b.getHitPoints());
        assertEquals(24,b.getAttack());
        assertEquals(10,b.getPointValue());
    }

    /**
       tests for a Troll with 20 hp 25 att and 10points

    */

    @Test public void test_3ArgConstructorTroll() {
        Troll t=new Troll(20,25,0);
        assertEquals(20,t.getHitPoints());
        assertEquals(25,t.getAttack());
        assertEquals(15,t.getPointValue());
    }

    /**
     *
     *tests for a Golem with 50 hp 40 att and 20points
     */
    @Test public void test_3ArgConstructorGolem() {
        Golem g=new Golem(50,40,0);
        assertEquals(50,g.getHitPoints());
        assertEquals(40,g.getAttack());
        assertEquals(20,g.getPointValue());
    }

    /**
       tests for Snake with 10 hp 20 att and 15 points
    */
    @Test public void test_3ArgConstructorSnake() {
        Snake s = new Snake(10,20,0);
        assertEquals(10,s.getHitPoints());
        assertEquals(20,s.getAttack());
        assertEquals(10,s.getPointValue());
    }

    /**
       tests for Zombie with 25 hp 10 att and 10 points
    */
    @Test public void test_3ArgConstructorZombie() {
        Zombie z = new Zombie(25,10,0);
        assertEquals(25,z.getHitPoints());
        assertEquals(10,z.getAttack());
        assertEquals(15,z.getPointValue());
    }

    /**
       tests for Pirate with 25 hp 10 att and 25 points
    */
    @Test public void test_3ArgConstructorPirate() {
        Pirate p = new Pirate(25,10,0);
        assertEquals(25,p.getHitPoints());
        assertEquals(10,p.getAttack());
        assertEquals(20,p.getPointValue());
    }


    /**

       tests for a bat with 20 hp 30 att and 40points
    */
    @Test public void test_4argConstructorBat() {
        Bat b=new Bat(20,30,0,40);
        assertEquals(20,b.getHitPoints());
        assertEquals(30,b.getAttack());
        assertEquals(40,b.getPointValue());
    }


    /**

       tests for a Troll with 30 hp 20 att and 40points
    */
    @Test public void test_4argConstructorTroll() {
        Troll t=new Troll(30,20,0,40);
        assertEquals(30,t.getHitPoints());
        assertEquals(20,t.getAttack());
        assertEquals(40,t.getPointValue());
    }

    /**

       tests for a Golem with 50 hp 40 att and 20points
    */
    @Test public void test_4argConstructorGolem() {
        Golem g=new Golem(50,40,0,30);
        assertEquals(50,g.getHitPoints());
        assertEquals(40,g.getAttack());
        assertEquals(30,g.getPointValue());
    }

    /**
       tests for Snake with 10 hp 20 att and 10 points
    */
    @Test public void test_4argConstructorSnake() {
        Snake s = new Snake(10,20,0,10);
        assertEquals(10,s.getHitPoints());
        assertEquals(20,s.getAttack());
        assertEquals(10,s.getPointValue());
    }

    /**
       tests for Zombie with 25 hp 10 att and 20 points
    */
    @Test public void test_4argConstructorZombie() {
        Zombie z = new Zombie(25,10,0,20);
        assertEquals(25,z.getHitPoints());
        assertEquals(10,z.getAttack());
        assertEquals(20,z.getPointValue());
    }

    /**
       tests for Pirate with 25 hp 25 att and 30 points
    */
    @Test public void test_4argConstructorPirate() {
        Pirate p = new Pirate(25,25,0,30);
        assertEquals(25,p.getHitPoints());
        assertEquals(25,p.getAttack());
        assertEquals(30,p.getPointValue());
    }


    /**
     *
     *tests for a Monster with 10 hp 20 att and 30points
     */
    @Test public void test_monster4arg() {
        Monster m=new Monster(10,20,0,30);
        assertEquals(10,m.getHitPoints());
        assertEquals(20,m.getAttack());
        assertEquals(30,m.getPointValue());

    }

    /**

       tests for a monster with 1 hp 2 att and 3points
    */
    @Test public void test_MonsterSetter() {
        Monster m = new Monster();
        m.setHitPoints(1);
        assertEquals(1,m.getHitPoints());
        m.setAttack(2);
        assertEquals(2,m.getAttack());
        m.setPointValue(3);
        assertEquals(3,m.getPointValue());
    }

    /**
     *
     *tests for a Bat with 1hp 2 att and 3points
     */
    @Test public void test_BatSetter() {
        Bat m = new Bat();
        m.setHitPoints(1);
        assertEquals(1,m.getHitPoints());
        m.setAttack(2);
        assertEquals(2,m.getAttack());
        m.setPointValue(3);
        assertEquals(3,m.getPointValue());
    }



    /**

       tests for a Troll with 1 hp 2 att and 3points
    */

    @Test public void test_TrollSetter() {
        Troll t = new Troll();
        t.setHitPoints(1);
        assertEquals(1,t.getHitPoints());
        t.setAttack(2);
        assertEquals(2,t.getAttack());
        t.setPointValue(3);
        assertEquals(3,t.getPointValue());
    }



    /**

       tests for a Golem with 1 hp 2 att and 3points
    */
    @Test public void test_GolemSetter() {
        Golem g = new Golem();
        g.setHitPoints(1);
        assertEquals(1,g.getHitPoints());
        g.setAttack(2);
        assertEquals(2,g.getAttack());
        g.setPointValue(3);
        assertEquals(3,g.getPointValue());
    }

    /**
       tests for a Snake with 3 hp 7 att and 12 points
    */
    @Test public void test_SnakeSetter() {
        Snake s = new Snake();
        s.setHitPoints(3);
        assertEquals(3,s.getHitPoints());
        s.setAttack(7);
        assertEquals(7,s.getAttack());
        s.setPointValue(12);
        assertEquals(12,s.getPointValue());
    }

    /**
       tests for a Zombie with 16 hp 4 att and 11 points
    */
    @Test public void test_ZombieSetter() {
        Zombie z = new Zombie();
        z.setHitPoints(16);
        assertEquals(16,z.getHitPoints());
        z.setAttack(4);
        assertEquals(4,z.getAttack());
        z.setPointValue(11);
        assertEquals(11,z.getPointValue());
    }

    /**
       tests for a Pirate with 22 hp 19 att and 16 points
    */
    @Test public void test_PirateSetter() {
        Pirate p = new Pirate();
        p.setHitPoints(22);
        assertEquals(22,p.getHitPoints());
        p.setAttack(19);
        assertEquals(19,p.getAttack());
        p.setPointValue(16);
        assertEquals(16,p.getPointValue());
    }

}
